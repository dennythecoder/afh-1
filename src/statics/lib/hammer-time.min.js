!(function () {
  let a = window.MutationObserver || window.WebKitMutationObserver,
    b =
      'ontouchstart' in window ||
      (window.DocumentTouch && document instanceof DocumentTouch),
    c =
      void 0 !== document.documentElement.style['touch-action'] ||
      document.documentElement.style['-ms-touch-action'];
  if (!c && b && a) {
    window.Hammer = window.Hammer || {};
    let d = /touch-action[:][\s]*(none)[^;'"]*/,
      e = /touch-action[:][\s]*(manipulation)[^;'"]*/,
      f = /touch-action/,
      g = navigator.userAgent.match(/(iPad|iPhone|iPod)/g) ? !0 : !1,
      h = (function () {
        try {
          const a = document.createElement('canvas');
          return !(
            !window.WebGLRenderingContext ||
            (!a.getContext('webgl') && !a.getContext('experimental-webgl'))
          );
        } catch (b) {
          return !1;
        }
      }()),
      i = h && g;
    (window.Hammer.time = {
      getTouchAction(a) {
        return this.checkStyleString(a.getAttribute('style'));
      },
      checkStyleString(a) {
        return f.test(a)
          ? d.test(a) ? 'none' : e.test(a) ? 'manipulation' : !0
          : void 0;
      },
      shouldHammer(a) {
        const b = this.hasParent(a.target);
        return b && (!i || Date.now() - a.target.lastStart < 125) ? b : !1;
      },
      touchHandler(a) {
        let b = a.target.getBoundingClientRect(),
          c = b.top !== this.pos.top || b.left !== this.pos.left,
          d = this.shouldHammer(a);
        (d === 'none' || (c === !1 && d === 'manipulation')) &&
          (a.type === 'touchend' &&
            (a.target.focus(),
              setTimeout(() => {
                a.target.click();
              }, 0)),
            a.preventDefault()),
        (this.scrolled = !1),
        delete a.target.lastStart;
      },
      touchStart(a) {
        (this.pos = a.target.getBoundingClientRect()),
        i && this.hasParent(a.target) && (a.target.lastStart = Date.now());
      },
      styleWatcher(a) {
        a.forEach(this.styleUpdater, this);
      },
      styleUpdater(a) {
        if (a.target.updateNext) return void (a.target.updateNext = !1);
        const b = this.getTouchAction(a.target);
        return b
          ? void (b !== 'none' && (a.target.hadTouchNone = !1))
          : void (
            !b &&
              ((a.oldValue && this.checkStyleString(a.oldValue)) ||
                a.target.hadTouchNone) &&
              ((a.target.hadTouchNone = !0),
                (a.target.updateNext = !1),
                a.target.setAttribute(
                  'style',
                  `${a.target.getAttribute('style')} touch-action: none;`,
                ))
          );
      },
      hasParent(a) {
        for (var b, c = a; c && c.parentNode; c = c.parentNode) { if ((b = this.getTouchAction(c))) return b; }
        return !1;
      },
      installStartEvents() {
        document.addEventListener('touchstart', this.touchStart.bind(this)),
        document.addEventListener('mousedown', this.touchStart.bind(this));
      },
      installEndEvents() {
        document.addEventListener('touchend', this.touchHandler.bind(this), !0),
        document.addEventListener(
          'mouseup',
          this.touchHandler.bind(this),
          !0,
        );
      },
      installObserver() {
        this.observer = new a(this.styleWatcher.bind(this)).observe(document, {
          subtree: !0,
          attributes: !0,
          attributeOldValue: !0,
          attributeFilter: ['style'],
        });
      },
      install() {
        this.installEndEvents(),
        this.installStartEvents(),
        this.installObserver();
      },
    }),
    window.Hammer.time.install();
  }
}());
