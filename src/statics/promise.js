!(function (e, t) { typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = t() : typeof define === 'function' && define.amd ? define(t) : e.Promise = t(); }(this, () => {
  function e() {} function t(e, t) { for (;e._state === 3;)e = e._value; e._state !== 0 ? (e._handled = !0, f._immediateFn(() => { const i = e._state === 1 ? t.onFulfilled : t.onRejected; if (i !== null) { let r; try { r = i(e._value); } catch (e) { return void o(t.promise, e); }n(t.promise, r); } else (e._state === 1 ? n : o)(t.promise, e._value); })) : e._deferreds.push(t); } function n(e, t) { try { if (t === e) throw new TypeError('A promise cannot be resolved with itself.'); if (t && (typeof t === 'object' || typeof t === 'function')) { const n = t.then; if (t instanceof f) return e._state = 3, e._value = t, void i(e); if (typeof n === 'function') return void r((function (e, t) { return function () { e.apply(t, arguments); }; }(n, t)), e); }e._state = 1, e._value = t, i(e); } catch (t) { o(e, t); } } function o(e, t) { e._state = 2, e._value = t, i(e); } function i(e) { e._state === 2 && e._deferreds.length === 0 && f._immediateFn(() => { e._handled || f._unhandledRejectionFn(e._value); }); for (let n = 0, o = e._deferreds.length; o > n; n++)t(e, e._deferreds[n]); e._deferreds = null; } function r(e, t) { let i = !1; try { e((e) => { i || (i = !0, n(t, e)); }, (e) => { i || (i = !0, o(t, e)); }); } catch (e) { if (i) return; i = !0, o(t, e); } } function f(e) { if (!(this instanceof f)) throw new TypeError('Promises must be constructed via new'); if (typeof e !== 'function') throw new TypeError('not a function'); this._state = 0, this._handled = !1, this._value = void 0, this._deferreds = [], r(e, this); } let u = setTimeout,
    c = f.prototype; return c.catch = function (e) { return this.then(null, e); }, c.then = function (n, o) { const i = new this.constructor(e); return t(this, new function (e, t, n) { this.onFulfilled = typeof e === 'function' ? e : null, this.onRejected = typeof t === 'function' ? t : null, this.promise = n; }(n, o, i)), i; }, f.all = function (e) { return new f(((t, n) => { function o(e, f) { try { if (f && (typeof f === 'object' || typeof f === 'function')) { const u = f.then; if (typeof u === 'function') return void u.call(f, (t) => { o(e, t); }, n); }i[e] = f, --r == 0 && t(i); } catch (e) { n(e); } } if (!e || void 0 === e.length) throw new TypeError('Promise.all accepts an array'); var i = Array.prototype.slice.call(e); if (i.length === 0) return t([]); for (var r = i.length, f = 0; i.length > f; f++)o(f, i[f]); })); }, f.resolve = function (e) { return e && typeof e === 'object' && e.constructor === f ? e : new f(((t) => { t(e); })); }, f.reject = function (e) { return new f(((t, n) => { n(e); })); }, f.race = function (e) { return new f(((t, n) => { for (let o = 0, i = e.length; i > o; o++)e[o].then(t, n); })); }, f._immediateFn = typeof setImmediate === 'function' && function (e) { setImmediate(e); } || function (e) { u(e, 0); }, f._unhandledRejectionFn = function (e) { void 0 !== console && console && console.warn('Possible Unhandled Promise Rejection:', e); }, f;
}));
